#
# Autogenerated by Thrift Compiler (0.9.3)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'

module Apache
  module Hadoop
    module Hbase
      module Thrift2
        module TDeleteType
          DELETE_COLUMN = 0
          DELETE_COLUMNS = 1
          VALUE_MAP = {0 => "DELETE_COLUMN", 1 => "DELETE_COLUMNS"}
          VALID_VALUES = Set.new([DELETE_COLUMN, DELETE_COLUMNS]).freeze
        end

        module TDurability
          SKIP_WAL = 1
          ASYNC_WAL = 2
          SYNC_WAL = 3
          FSYNC_WAL = 4
          VALUE_MAP = {1 => "SKIP_WAL", 2 => "ASYNC_WAL", 3 => "SYNC_WAL", 4 => "FSYNC_WAL"}
          VALID_VALUES = Set.new([SKIP_WAL, ASYNC_WAL, SYNC_WAL, FSYNC_WAL]).freeze
        end

        class TTimeRange
          include ::Thrift::Struct, ::Thrift::Struct_Union
          MINSTAMP = 1
          MAXSTAMP = 2

          FIELDS = {
            MINSTAMP => {:type => ::Thrift::Types::I64, :name => 'minStamp'},
            MAXSTAMP => {:type => ::Thrift::Types::I64, :name => 'maxStamp'}
          }

          def struct_fields; FIELDS; end

          def validate
            raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field minStamp is unset!') unless @minStamp
            raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field maxStamp is unset!') unless @maxStamp
          end

          ::Thrift::Struct.generate_accessors self
        end

        # Addresses a single cell or multiple cells
# in a HBase table by column family and optionally
# a column qualifier and timestamp
        class TColumn
          include ::Thrift::Struct, ::Thrift::Struct_Union
          FAMILY = 1
          QUALIFIER = 2
          TIMESTAMP = 3

          FIELDS = {
            FAMILY => {:type => ::Thrift::Types::STRING, :name => 'family', :binary => true},
            QUALIFIER => {:type => ::Thrift::Types::STRING, :name => 'qualifier', :binary => true, :optional => true},
            TIMESTAMP => {:type => ::Thrift::Types::I64, :name => 'timestamp', :optional => true}
          }

          def struct_fields; FIELDS; end

          def validate
            raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field family is unset!') unless @family
          end

          ::Thrift::Struct.generate_accessors self
        end

        # Represents a single cell and its value.
        class TColumnValue
          include ::Thrift::Struct, ::Thrift::Struct_Union
          FAMILY = 1
          QUALIFIER = 2
          VALUE = 3
          TIMESTAMP = 4
          TAGS = 5

          FIELDS = {
            FAMILY => {:type => ::Thrift::Types::STRING, :name => 'family', :binary => true},
            QUALIFIER => {:type => ::Thrift::Types::STRING, :name => 'qualifier', :binary => true},
            VALUE => {:type => ::Thrift::Types::STRING, :name => 'value', :binary => true},
            TIMESTAMP => {:type => ::Thrift::Types::I64, :name => 'timestamp', :optional => true},
            TAGS => {:type => ::Thrift::Types::STRING, :name => 'tags', :binary => true, :optional => true}
          }

          def struct_fields; FIELDS; end

          def validate
            raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field family is unset!') unless @family
            raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field qualifier is unset!') unless @qualifier
            raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field value is unset!') unless @value
          end

          ::Thrift::Struct.generate_accessors self
        end

        # Represents a single cell and the amount to increment it by
        class TColumnIncrement
          include ::Thrift::Struct, ::Thrift::Struct_Union
          FAMILY = 1
          QUALIFIER = 2
          AMOUNT = 3

          FIELDS = {
            FAMILY => {:type => ::Thrift::Types::STRING, :name => 'family', :binary => true},
            QUALIFIER => {:type => ::Thrift::Types::STRING, :name => 'qualifier', :binary => true},
            AMOUNT => {:type => ::Thrift::Types::I64, :name => 'amount', :default => 1, :optional => true}
          }

          def struct_fields; FIELDS; end

          def validate
            raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field family is unset!') unless @family
            raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field qualifier is unset!') unless @qualifier
          end

          ::Thrift::Struct.generate_accessors self
        end

        # if no Result is found, row and columnValues will not be set.
        class TResult
          include ::Thrift::Struct, ::Thrift::Struct_Union
          ROW = 1
          COLUMNVALUES = 2

          FIELDS = {
            ROW => {:type => ::Thrift::Types::STRING, :name => 'row', :binary => true, :optional => true},
            COLUMNVALUES => {:type => ::Thrift::Types::LIST, :name => 'columnValues', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Apache::Hadoop::Hbase::Thrift2::TColumnValue}}
          }

          def struct_fields; FIELDS; end

          def validate
            raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field columnValues is unset!') unless @columnValues
          end

          ::Thrift::Struct.generate_accessors self
        end

        class TAuthorization
          include ::Thrift::Struct, ::Thrift::Struct_Union
          LABELS = 1

          FIELDS = {
            LABELS => {:type => ::Thrift::Types::LIST, :name => 'labels', :element => {:type => ::Thrift::Types::STRING}, :optional => true}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class TCellVisibility
          include ::Thrift::Struct, ::Thrift::Struct_Union
          EXPRESSION = 1

          FIELDS = {
            EXPRESSION => {:type => ::Thrift::Types::STRING, :name => 'expression', :optional => true}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        # Used to perform Get operations on a single row.
# 
# The scope can be further narrowed down by specifying a list of
# columns or column families.
# 
# To get everything for a row, instantiate a Get object with just the row to get.
# To further define the scope of what to get you can add a timestamp or time range
# with an optional maximum number of versions to return.
# 
# If you specify a time range and a timestamp the range is ignored.
# Timestamps on TColumns are ignored.
        class TGet
          include ::Thrift::Struct, ::Thrift::Struct_Union
          ROW = 1
          COLUMNS = 2
          TIMESTAMP = 3
          TIMERANGE = 4
          MAXVERSIONS = 5
          FILTERSTRING = 6
          ATTRIBUTES = 7
          AUTHORIZATIONS = 8

          FIELDS = {
            ROW => {:type => ::Thrift::Types::STRING, :name => 'row', :binary => true},
            COLUMNS => {:type => ::Thrift::Types::LIST, :name => 'columns', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Apache::Hadoop::Hbase::Thrift2::TColumn}, :optional => true},
            TIMESTAMP => {:type => ::Thrift::Types::I64, :name => 'timestamp', :optional => true},
            TIMERANGE => {:type => ::Thrift::Types::STRUCT, :name => 'timeRange', :class => ::Apache::Hadoop::Hbase::Thrift2::TTimeRange, :optional => true},
            MAXVERSIONS => {:type => ::Thrift::Types::I32, :name => 'maxVersions', :optional => true},
            FILTERSTRING => {:type => ::Thrift::Types::STRING, :name => 'filterString', :binary => true, :optional => true},
            ATTRIBUTES => {:type => ::Thrift::Types::MAP, :name => 'attributes', :key => {:type => ::Thrift::Types::STRING, :binary => true}, :value => {:type => ::Thrift::Types::STRING, :binary => true}, :optional => true},
            AUTHORIZATIONS => {:type => ::Thrift::Types::STRUCT, :name => 'authorizations', :class => ::Apache::Hadoop::Hbase::Thrift2::TAuthorization, :optional => true}
          }

          def struct_fields; FIELDS; end

          def validate
            raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field row is unset!') unless @row
          end

          ::Thrift::Struct.generate_accessors self
        end

        # Used to perform Put operations for a single row.
# 
# Add column values to this object and they'll be added.
# You can provide a default timestamp if the column values
# don't have one. If you don't provide a default timestamp
# the current time is inserted.
# 
# You can specify how this Put should be written to the write-ahead Log (WAL)
# by changing the durability. If you don't provide durability, it defaults to
# column family's default setting for durability.
        class TPut
          include ::Thrift::Struct, ::Thrift::Struct_Union
          ROW = 1
          COLUMNVALUES = 2
          TIMESTAMP = 3
          ATTRIBUTES = 5
          DURABILITY = 6
          CELLVISIBILITY = 7

          FIELDS = {
            ROW => {:type => ::Thrift::Types::STRING, :name => 'row', :binary => true},
            COLUMNVALUES => {:type => ::Thrift::Types::LIST, :name => 'columnValues', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Apache::Hadoop::Hbase::Thrift2::TColumnValue}},
            TIMESTAMP => {:type => ::Thrift::Types::I64, :name => 'timestamp', :optional => true},
            ATTRIBUTES => {:type => ::Thrift::Types::MAP, :name => 'attributes', :key => {:type => ::Thrift::Types::STRING, :binary => true}, :value => {:type => ::Thrift::Types::STRING, :binary => true}, :optional => true},
            DURABILITY => {:type => ::Thrift::Types::I32, :name => 'durability', :optional => true, :enum_class => ::Apache::Hadoop::Hbase::Thrift2::TDurability},
            CELLVISIBILITY => {:type => ::Thrift::Types::STRUCT, :name => 'cellVisibility', :class => ::Apache::Hadoop::Hbase::Thrift2::TCellVisibility, :optional => true}
          }

          def struct_fields; FIELDS; end

          def validate
            raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field row is unset!') unless @row
            raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field columnValues is unset!') unless @columnValues
            unless @durability.nil? || ::Apache::Hadoop::Hbase::Thrift2::TDurability::VALID_VALUES.include?(@durability)
              raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field durability!')
            end
          end

          ::Thrift::Struct.generate_accessors self
        end

        # Used to perform Delete operations on a single row.
# 
# The scope can be further narrowed down by specifying a list of
# columns or column families as TColumns.
# 
# Specifying only a family in a TColumn will delete the whole family.
# If a timestamp is specified all versions with a timestamp less than
# or equal to this will be deleted. If no timestamp is specified the
# current time will be used.
# 
# Specifying a family and a column qualifier in a TColumn will delete only
# this qualifier. If a timestamp is specified only versions equal
# to this timestamp will be deleted. If no timestamp is specified the
# most recent version will be deleted.  To delete all previous versions,
# specify the DELETE_COLUMNS TDeleteType.
# 
# The top level timestamp is only used if a complete row should be deleted
# (i.e. no columns are passed) and if it is specified it works the same way
# as if you had added a TColumn for every column family and this timestamp
# (i.e. all versions older than or equal in all column families will be deleted)
# 
# You can specify how this Delete should be written to the write-ahead Log (WAL)
# by changing the durability. If you don't provide durability, it defaults to
# column family's default setting for durability.
        class TDelete
          include ::Thrift::Struct, ::Thrift::Struct_Union
          ROW = 1
          COLUMNS = 2
          TIMESTAMP = 3
          DELETETYPE = 4
          ATTRIBUTES = 6
          DURABILITY = 7

          FIELDS = {
            ROW => {:type => ::Thrift::Types::STRING, :name => 'row', :binary => true},
            COLUMNS => {:type => ::Thrift::Types::LIST, :name => 'columns', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Apache::Hadoop::Hbase::Thrift2::TColumn}, :optional => true},
            TIMESTAMP => {:type => ::Thrift::Types::I64, :name => 'timestamp', :optional => true},
            DELETETYPE => {:type => ::Thrift::Types::I32, :name => 'deleteType', :default =>             1, :optional => true, :enum_class => ::Apache::Hadoop::Hbase::Thrift2::TDeleteType},
            ATTRIBUTES => {:type => ::Thrift::Types::MAP, :name => 'attributes', :key => {:type => ::Thrift::Types::STRING, :binary => true}, :value => {:type => ::Thrift::Types::STRING, :binary => true}, :optional => true},
            DURABILITY => {:type => ::Thrift::Types::I32, :name => 'durability', :optional => true, :enum_class => ::Apache::Hadoop::Hbase::Thrift2::TDurability}
          }

          def struct_fields; FIELDS; end

          def validate
            raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field row is unset!') unless @row
            unless @deleteType.nil? || ::Apache::Hadoop::Hbase::Thrift2::TDeleteType::VALID_VALUES.include?(@deleteType)
              raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field deleteType!')
            end
            unless @durability.nil? || ::Apache::Hadoop::Hbase::Thrift2::TDurability::VALID_VALUES.include?(@durability)
              raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field durability!')
            end
          end

          ::Thrift::Struct.generate_accessors self
        end

        # Used to perform Increment operations for a single row.
# 
# You can specify how this Increment should be written to the write-ahead Log (WAL)
# by changing the durability. If you don't provide durability, it defaults to
# column family's default setting for durability.
        class TIncrement
          include ::Thrift::Struct, ::Thrift::Struct_Union
          ROW = 1
          COLUMNS = 2
          ATTRIBUTES = 4
          DURABILITY = 5
          CELLVISIBILITY = 6

          FIELDS = {
            ROW => {:type => ::Thrift::Types::STRING, :name => 'row', :binary => true},
            COLUMNS => {:type => ::Thrift::Types::LIST, :name => 'columns', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Apache::Hadoop::Hbase::Thrift2::TColumnIncrement}},
            ATTRIBUTES => {:type => ::Thrift::Types::MAP, :name => 'attributes', :key => {:type => ::Thrift::Types::STRING, :binary => true}, :value => {:type => ::Thrift::Types::STRING, :binary => true}, :optional => true},
            DURABILITY => {:type => ::Thrift::Types::I32, :name => 'durability', :optional => true, :enum_class => ::Apache::Hadoop::Hbase::Thrift2::TDurability},
            CELLVISIBILITY => {:type => ::Thrift::Types::STRUCT, :name => 'cellVisibility', :class => ::Apache::Hadoop::Hbase::Thrift2::TCellVisibility, :optional => true}
          }

          def struct_fields; FIELDS; end

          def validate
            raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field row is unset!') unless @row
            raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field columns is unset!') unless @columns
            unless @durability.nil? || ::Apache::Hadoop::Hbase::Thrift2::TDurability::VALID_VALUES.include?(@durability)
              raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field durability!')
            end
          end

          ::Thrift::Struct.generate_accessors self
        end

        class TAppend
          include ::Thrift::Struct, ::Thrift::Struct_Union
          ROW = 1
          COLUMNS = 2
          ATTRIBUTES = 3
          DURABILITY = 4
          CELLVISIBILITY = 5

          FIELDS = {
            ROW => {:type => ::Thrift::Types::STRING, :name => 'row', :binary => true},
            COLUMNS => {:type => ::Thrift::Types::LIST, :name => 'columns', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Apache::Hadoop::Hbase::Thrift2::TColumnValue}},
            ATTRIBUTES => {:type => ::Thrift::Types::MAP, :name => 'attributes', :key => {:type => ::Thrift::Types::STRING, :binary => true}, :value => {:type => ::Thrift::Types::STRING, :binary => true}, :optional => true},
            DURABILITY => {:type => ::Thrift::Types::I32, :name => 'durability', :optional => true, :enum_class => ::Apache::Hadoop::Hbase::Thrift2::TDurability},
            CELLVISIBILITY => {:type => ::Thrift::Types::STRUCT, :name => 'cellVisibility', :class => ::Apache::Hadoop::Hbase::Thrift2::TCellVisibility, :optional => true}
          }

          def struct_fields; FIELDS; end

          def validate
            raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field row is unset!') unless @row
            raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field columns is unset!') unless @columns
            unless @durability.nil? || ::Apache::Hadoop::Hbase::Thrift2::TDurability::VALID_VALUES.include?(@durability)
              raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field durability!')
            end
          end

          ::Thrift::Struct.generate_accessors self
        end

        # Any timestamps in the columns are ignored, use timeRange to select by timestamp.
# Max versions defaults to 1.
        class TScan
          include ::Thrift::Struct, ::Thrift::Struct_Union
          STARTROW = 1
          STOPROW = 2
          COLUMNS = 3
          CACHING = 4
          MAXVERSIONS = 5
          TIMERANGE = 6
          FILTERSTRING = 7
          BATCHSIZE = 8
          ATTRIBUTES = 9
          AUTHORIZATIONS = 10
          REVERSED = 11

          FIELDS = {
            STARTROW => {:type => ::Thrift::Types::STRING, :name => 'startRow', :binary => true, :optional => true},
            STOPROW => {:type => ::Thrift::Types::STRING, :name => 'stopRow', :binary => true, :optional => true},
            COLUMNS => {:type => ::Thrift::Types::LIST, :name => 'columns', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Apache::Hadoop::Hbase::Thrift2::TColumn}, :optional => true},
            CACHING => {:type => ::Thrift::Types::I32, :name => 'caching', :optional => true},
            MAXVERSIONS => {:type => ::Thrift::Types::I32, :name => 'maxVersions', :default => 1, :optional => true},
            TIMERANGE => {:type => ::Thrift::Types::STRUCT, :name => 'timeRange', :class => ::Apache::Hadoop::Hbase::Thrift2::TTimeRange, :optional => true},
            FILTERSTRING => {:type => ::Thrift::Types::STRING, :name => 'filterString', :binary => true, :optional => true},
            BATCHSIZE => {:type => ::Thrift::Types::I32, :name => 'batchSize', :optional => true},
            ATTRIBUTES => {:type => ::Thrift::Types::MAP, :name => 'attributes', :key => {:type => ::Thrift::Types::STRING, :binary => true}, :value => {:type => ::Thrift::Types::STRING, :binary => true}, :optional => true},
            AUTHORIZATIONS => {:type => ::Thrift::Types::STRUCT, :name => 'authorizations', :class => ::Apache::Hadoop::Hbase::Thrift2::TAuthorization, :optional => true},
            REVERSED => {:type => ::Thrift::Types::BOOL, :name => 'reversed', :optional => true}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        # Atomic mutation for the specified row. It can be either Put or Delete.
        class TMutation < ::Thrift::Union
          include ::Thrift::Struct_Union
          class << self
            def put(val)
              TMutation.new(:put, val)
            end

            def deleteSingle(val)
              TMutation.new(:deleteSingle, val)
            end
          end

          PUT = 1
          DELETESINGLE = 2

          FIELDS = {
            PUT => {:type => ::Thrift::Types::STRUCT, :name => 'put', :class => ::Apache::Hadoop::Hbase::Thrift2::TPut},
            DELETESINGLE => {:type => ::Thrift::Types::STRUCT, :name => 'deleteSingle', :class => ::Apache::Hadoop::Hbase::Thrift2::TDelete}
          }

          def struct_fields; FIELDS; end

          def validate
            raise(StandardError, 'Union fields are not set.') if get_set_field.nil? || get_value.nil?
          end

          ::Thrift::Union.generate_accessors self
        end

        # A TRowMutations object is used to apply a number of Mutations to a single row.
        class TRowMutations
          include ::Thrift::Struct, ::Thrift::Struct_Union
          ROW = 1
          MUTATIONS = 2

          FIELDS = {
            ROW => {:type => ::Thrift::Types::STRING, :name => 'row', :binary => true},
            MUTATIONS => {:type => ::Thrift::Types::LIST, :name => 'mutations', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Apache::Hadoop::Hbase::Thrift2::TMutation}}
          }

          def struct_fields; FIELDS; end

          def validate
            raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field row is unset!') unless @row
            raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field mutations is unset!') unless @mutations
          end

          ::Thrift::Struct.generate_accessors self
        end

        class THRegionInfo
          include ::Thrift::Struct, ::Thrift::Struct_Union
          REGIONID = 1
          TABLENAME = 2
          STARTKEY = 3
          ENDKEY = 4
          OFFLINE = 5
          SPLIT = 6
          REPLICAID = 7

          FIELDS = {
            REGIONID => {:type => ::Thrift::Types::I64, :name => 'regionId'},
            TABLENAME => {:type => ::Thrift::Types::STRING, :name => 'tableName', :binary => true},
            STARTKEY => {:type => ::Thrift::Types::STRING, :name => 'startKey', :binary => true, :optional => true},
            ENDKEY => {:type => ::Thrift::Types::STRING, :name => 'endKey', :binary => true, :optional => true},
            OFFLINE => {:type => ::Thrift::Types::BOOL, :name => 'offline', :optional => true},
            SPLIT => {:type => ::Thrift::Types::BOOL, :name => 'split', :optional => true},
            REPLICAID => {:type => ::Thrift::Types::I32, :name => 'replicaId', :optional => true}
          }

          def struct_fields; FIELDS; end

          def validate
            raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field regionId is unset!') unless @regionId
            raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field tableName is unset!') unless @tableName
          end

          ::Thrift::Struct.generate_accessors self
        end

        class TServerName
          include ::Thrift::Struct, ::Thrift::Struct_Union
          HOSTNAME = 1
          PORT = 2
          STARTCODE = 3

          FIELDS = {
            HOSTNAME => {:type => ::Thrift::Types::STRING, :name => 'hostName'},
            PORT => {:type => ::Thrift::Types::I32, :name => 'port', :optional => true},
            STARTCODE => {:type => ::Thrift::Types::I64, :name => 'startCode', :optional => true}
          }

          def struct_fields; FIELDS; end

          def validate
            raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field hostName is unset!') unless @hostName
          end

          ::Thrift::Struct.generate_accessors self
        end

        class THRegionLocation
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SERVERNAME = 1
          REGIONINFO = 2

          FIELDS = {
            SERVERNAME => {:type => ::Thrift::Types::STRUCT, :name => 'serverName', :class => ::Apache::Hadoop::Hbase::Thrift2::TServerName},
            REGIONINFO => {:type => ::Thrift::Types::STRUCT, :name => 'regionInfo', :class => ::Apache::Hadoop::Hbase::Thrift2::THRegionInfo}
          }

          def struct_fields; FIELDS; end

          def validate
            raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field serverName is unset!') unless @serverName
            raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field regionInfo is unset!') unless @regionInfo
          end

          ::Thrift::Struct.generate_accessors self
        end

        # A TIOError exception signals that an error occurred communicating
# to the HBase master or a HBase region server. Also used to return
# more general HBase error conditions.
        class TIOError < ::Thrift::Exception
          include ::Thrift::Struct, ::Thrift::Struct_Union
          def initialize(message=nil)
            super()
            self.message = message
          end

          MESSAGE = 1

          FIELDS = {
            MESSAGE => {:type => ::Thrift::Types::STRING, :name => 'message', :optional => true}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        # A TIllegalArgument exception indicates an illegal or invalid
# argument was passed into a procedure.
        class TIllegalArgument < ::Thrift::Exception
          include ::Thrift::Struct, ::Thrift::Struct_Union
          def initialize(message=nil)
            super()
            self.message = message
          end

          MESSAGE = 1

          FIELDS = {
            MESSAGE => {:type => ::Thrift::Types::STRING, :name => 'message', :optional => true}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

      end
    end
  end
end
